/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   push_swap.h                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef PUSH_SWAP_H
# define PUSH_SWAP_H

# include <stdlib.h>
# include <unistd.h>
# include <limits.h>
# include <stdio.h>

typedef struct s_stack
{
    int             value;
    int             index;
    int             pos;
    int             target_pos;
    int             cost_a;
    int             cost_b;
    struct s_stack  *next;
}   t_stack;

/* Stack Operations */
t_stack     *stack_new(int value);
void        stack_add_bottom(t_stack **stack, t_stack *new);
t_stack     *stack_get_last(t_stack *stack);
t_stack     *stack_get_before_last(t_stack *stack);
int         stack_size(t_stack *stack);

/* Operations */
void        sa(t_stack **stack_a);
void        sb(t_stack **stack_b);
void        ss(t_stack **stack_a, t_stack **stack_b);
void        pa(t_stack **stack_a, t_stack **stack_b);
void        pb(t_stack **stack_a, t_stack **stack_b);
void        ra(t_stack **stack_a);
void        rb(t_stack **stack_b);
void        rr(t_stack **stack_a, t_stack **stack_b);
void        rra(t_stack **stack_a);
void        rrb(t_stack **stack_b);
void        rrr(t_stack **stack_a, t_stack **stack_b);

/* Sorting Algorithm */
void        sort(t_stack **stack_a, t_stack **stack_b);
void        sort_three(t_stack **stack);
void        sort_big(t_stack **stack_a, t_stack **stack_b);
void        push_all_save_three(t_stack **stack_a, t_stack **stack_b);

/* Position and Cost Calculation */
void        assign_index(t_stack *stack_a, int stack_size);
void        get_position(t_stack **stack);
void        get_target_position(t_stack **stack_a, t_stack **stack_b);
void        get_cost(t_stack **stack_a, t_stack **stack_b);
void        do_cheapest_move(t_stack **stack_a, t_stack **stack_b);

/* Utils */
int         is_sorted(t_stack *stack);
void        free_stack(t_stack **stack);
long int    ft_atoi(const char *str);
void        ft_putstr(char *str);
void        error_exit(t_stack **stack_a, t_stack **stack_b);
int         abs_value(int n);
void        shift_stack(t_stack **stack_a);

/* Input Validation */
int         is_number(char *str);
int         has_duplicates(t_stack *stack);
void        check_input(char **av);

#endif

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

static t_stack  *fill_stack(int ac, char **av)
{
    t_stack     *stack_a;
    long int    nb;
    int         i;

    stack_a = NULL;
    i = 1;
    while (i < ac)
    {
        nb = ft_atoi(av[i]);
        if (nb > INT_MAX || nb < INT_MIN)
            error_exit(&stack_a, NULL);
        if (i == 1)
            stack_a = stack_new((int)nb);
        else
            stack_add_bottom(&stack_a, stack_new((int)nb));
        i++;
    }
    return (stack_a);
}

int main(int ac, char **av)
{
    t_stack *stack_a;
    t_stack *stack_b;

    if (ac < 2)
        return (0);
    check_input(av);
    stack_b = NULL;
    stack_a = fill_stack(ac, av);
    if (has_duplicates(stack_a))
        error_exit(&stack_a, NULL);
    if (!is_sorted(stack_a))
        sort(&stack_a, &stack_b);
    free_stack(&stack_a);
    free_stack(&stack_b);
    return (0);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   sort.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

static void push_init(t_stack **stack_a, t_stack **stack_b)
{
    push_all_save_three(stack_a, stack_b);
    sort_three(stack_a);
}

void    sort(t_stack **stack_a, t_stack **stack_b)
{
    int size;

    size = stack_size(*stack_a);
    if (size == 2 && !is_sorted(*stack_a))
        sa(stack_a);
    else if (size == 3)
        sort_three(stack_a);
    else if (size > 3)
        sort_big(stack_a, stack_b);
}

void    sort_big(t_stack **stack_a, t_stack **stack_b)
{
    int operations_count = 0;
    int stack_b_size;
    
    push_init(stack_a, stack_b);
    while (*stack_b)
    {
        stack_b_size = stack_size(*stack_b);
        get_target_position(stack_a, stack_b);
        get_cost(stack_a, stack_b);
        do_cheapest_move(stack_a, stack_b);
        
        operations_count++;
        // Safety check to prevent infinite loop
        if (operations_count > 100000 || stack_size(*stack_b) == stack_b_size)
        {
            ft_putstr("Error: Infinite loop detected\n");
            break;
        }
    }
    if (!is_sorted(*stack_a))
        shift_stack(stack_a);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   sort_three.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

static int  find_highest_index(t_stack *stack)
{
    int     index;

    index = stack->index;
    while (stack)
    {
        if (stack->index > index)
            index = stack->index;
        stack = stack->next;
    }
    return (index);
}

void    sort_three(t_stack **stack)
{
    int     highest;

    if (is_sorted(*stack))
        return ;
    highest = find_highest_index(*stack);
    if ((*stack)->index == highest)
        ra(stack);
    else if ((*stack)->next->index == highest)
        rra(stack);
    if ((*stack)->index > (*stack)->next->index)
        sa(stack);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   push_all_save_three.c                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

static void push_chunks(t_stack **stack_a, t_stack **stack_b, int chunk_size)
{
    int pushed;
    int chunk_max;
    int rotations;
    int size_a;

    pushed = 0;
    chunk_max = chunk_size;
    while (stack_size(*stack_a) > 3)
    {
        rotations = 0;
        size_a = stack_size(*stack_a);
        if ((*stack_a)->index <= chunk_max)
        {
            pb(stack_a, stack_b);
            pushed++;
            if (stack_size(*stack_b) > 1 && (*stack_b)->index < chunk_max - chunk_size / 2)
                rb(stack_b);
        }
        else
        {
            ra(stack_a);
            rotations++;
        }
        
        // If we've rotated through the entire stack without finding a number to push
        if (rotations >= size_a)
        {
            chunk_max += chunk_size;
            pushed = 0;
            rotations = 0;
        }
        
        if (pushed == chunk_size)
        {
            chunk_max += chunk_size;
            pushed = 0;
        }
    }
}

void    push_all_save_three(t_stack **stack_a, t_stack **stack_b)
{
    int size;
    int chunk_size;

    size = stack_size(*stack_a);
    assign_index(*stack_a, size);
    
    // Optimized chunk size calculation for less operations
    if (size <= 100)
        chunk_size = 20;
    else if (size <= 500)
        chunk_size = 45;
    else
        chunk_size = 75;
    
    push_chunks(stack_a, stack_b, chunk_size);
    
    while (stack_size(*stack_a) > 3)
        pb(stack_a, stack_b);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   position.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   position.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

void get_position(t_stack **stack)
{
    t_stack *tmp;
    int     i;

    tmp = *stack;
    i = 0;
    while (tmp)
    {
        tmp->pos = i;
        tmp = tmp->next;
        i++;
    }
}

static int  get_target(t_stack **stack_a, int b_idx, int target_idx, int target_pos)
{
    t_stack *tmp_a;

    tmp_a = *stack_a;
    while (tmp_a)
    {
        if (tmp_a->index > b_idx && tmp_a->index < target_idx)
        {
            target_idx = tmp_a->index;
            target_pos = tmp_a->pos;
        }
        tmp_a = tmp_a->next;
    }
    if (target_idx != INT_MAX)
        return (target_pos);
    tmp_a = *stack_a;
    while (tmp_a)
    {
        if (tmp_a->index < target_idx)
        {
            target_idx = tmp_a->index;
            target_pos = tmp_a->pos;
        }
        tmp_a = tmp_a->next;
    }
    return (target_pos);
}

void    get_target_position(t_stack **stack_a, t_stack **stack_b)
{
    t_stack *tmp_b;
    int     target_pos;

    tmp_b = *stack_b;
    get_position(stack_a);
    get_position(stack_b);
    target_pos = 0;
    while (tmp_b)
    {
        target_pos = get_target(stack_a, tmp_b->index, INT_MAX, target_pos);
        tmp_b->target_pos = target_pos;
        tmp_b = tmp_b->next;
    }
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   cost.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

void    get_cost(t_stack **stack_a, t_stack **stack_b)
{
    t_stack *tmp_a;
    t_stack *tmp_b;
    int     size_a;
    int     size_b;

    tmp_a = *stack_a;
    tmp_b = *stack_b;
    size_a = stack_size(tmp_a);
    size_b = stack_size(tmp_b);
    while (tmp_b)
    {
        tmp_b->cost_b = tmp_b->pos;
        if (tmp_b->pos > size_b / 2)
            tmp_b->cost_b = (size_b - tmp_b->pos) * -1;
        tmp_b->cost_a = tmp_b->target_pos;
        if (tmp_b->target_pos > size_a / 2)
            tmp_b->cost_a = (size_a - tmp_b->target_pos) * -1;
        tmp_b = tmp_b->next;
    }
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   do_move.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

static void do_rotate_both(t_stack **stack_a, t_stack **stack_b, int *cost_a, int *cost_b)
{
    while (*cost_a > 0 && *cost_b > 0)
    {
        (*cost_a)--;
        (*cost_b)--;
        rr(stack_a, stack_b);
    }
}

static void do_reverse_rotate_both(t_stack **stack_a, t_stack **stack_b, int *cost_a, int *cost_b)
{
    while (*cost_a < 0 && *cost_b < 0)
    {
        (*cost_a)++;
        (*cost_b)++;
        rrr(stack_a, stack_b);
    }
}

static void do_rotate_a(t_stack **stack_a, int *cost)
{
    while (*cost)
    {
        if (*cost > 0)
        {
            ra(stack_a);
            (*cost)--;
        }
        else if (*cost < 0)
        {
            rra(stack_a);
            (*cost)++;
        }
    }
}

static void do_rotate_b(t_stack **stack_b, int *cost)
{
    while (*cost)
    {
        if (*cost > 0)
        {
            rb(stack_b);
            (*cost)--;
        }
        else if (*cost < 0)
        {
            rrb(stack_b);
            (*cost)++;
        }
    }
}

static void do_move(t_stack **stack_a, t_stack **stack_b, int cost_a, int cost_b)
{
    if (cost_a < 0 && cost_b < 0)
        do_reverse_rotate_both(stack_a, stack_b, &cost_a, &cost_b);
    else if (cost_a > 0 && cost_b > 0)
        do_rotate_both(stack_a, stack_b, &cost_a, &cost_b);
    do_rotate_a(stack_a, &cost_a);
    do_rotate_b(stack_b, &cost_b);
    pa(stack_a, stack_b);
}

void    do_cheapest_move(t_stack **stack_a, t_stack **stack_b)
{
    t_stack *tmp;
    int     cheapest;
    int     cost_a;
    int     cost_b;

    tmp = *stack_b;
    cheapest = INT_MAX;
    while (tmp)
    {
        if (abs_value(tmp->cost_a) + abs_value(tmp->cost_b) < cheapest)
        {
            cheapest = abs_value(tmp->cost_a) + abs_value(tmp->cost_b);
            cost_a = tmp->cost_a;
            cost_b = tmp->cost_b;
        }
        tmp = tmp->next;
    }
    do_move(stack_a, stack_b, cost_a, cost_b);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   operations_push.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

static void push(t_stack **src, t_stack **dest)
{
    t_stack *tmp;

    if (*src == NULL)
        return ;
    tmp = (*src)->next;
    (*src)->next = *dest;
    *dest = *src;
    *src = tmp;
}

void    pa(t_stack **stack_a, t_stack **stack_b)
{
    push(stack_b, stack_a);
    ft_putstr("pa\n");
}

void    pb(t_stack **stack_a, t_stack **stack_b)
{
    push(stack_a, stack_b);
    ft_putstr("pb\n");
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   operations_swap.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

static void swap(t_stack *stack)
{
    int tmp;

    if (stack == NULL || stack->next == NULL)
        return ;
    tmp = stack->value;
    stack->value = stack->next->value;
    stack->next->value = tmp;
    tmp = stack->index;
    stack->index = stack->next->index;
    stack->next->index = tmp;
}

void    sa(t_stack **stack_a)
{
    swap(*stack_a);
    ft_putstr("sa\n");
}

void    sb(t_stack **stack_b)
{
    swap(*stack_b);
    ft_putstr("sb\n");
}

void    ss(t_stack **stack_a, t_stack **stack_b)
{
    swap(*stack_a);
    swap(*stack_b);
    ft_putstr("ss\n");
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   operations_rotate.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

static void rotate(t_stack **stack)
{
    t_stack *tmp;
    t_stack *tail;

    tmp = *stack;
    *stack = (*stack)->next;
    tail = stack_get_last(*stack);
    tmp->next = NULL;
    tail->next = tmp;
}

void    ra(t_stack **stack_a)
{
    rotate(stack_a);
    ft_putstr("ra\n");
}

void    rb(t_stack **stack_b)
{
    rotate(stack_b);
    ft_putstr("rb\n");
}

void    rr(t_stack **stack_a, t_stack **stack_b)
{
    rotate(stack_a);
    rotate(stack_b);
    ft_putstr("rr\n");
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   operations_reverse_rotate.c                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

static void reverse_rotate(t_stack **stack)
{
    t_stack *tmp;
    t_stack *tail;
    t_stack *before_tail;

    tail = stack_get_last(*stack);
    before_tail = stack_get_before_last(*stack);
    tmp = *stack;
    *stack = tail;
    (*stack)->next = tmp;
    before_tail->next = NULL;
}

void    rra(t_stack **stack_a)
{
    reverse_rotate(stack_a);
    ft_putstr("rra\n");
}

void    rrb(t_stack **stack_b)
{
    reverse_rotate(stack_b);
    ft_putstr("rrb\n");
}

void    rrr(t_stack **stack_a, t_stack **stack_b)
{
    reverse_rotate(stack_a);
    reverse_rotate(stack_b);
    ft_putstr("rrr\n");
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   stack_utils.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

t_stack *stack_new(int value)
{
    t_stack *new;

    new = malloc(sizeof(t_stack));
    if (!new)
        return (NULL);
    new->value = value;
    new->index = 0;
    new->pos = -1;
    new->target_pos = -1;
    new->cost_a = -1;
    new->cost_b = -1;
    new->next = NULL;
    return (new);
}

void    stack_add_bottom(t_stack **stack, t_stack *new)
{
    t_stack *tail;

    if (!new)
        return ;
    if (!*stack)
    {
        *stack = new;
        return ;
    }
    tail = stack_get_last(*stack);
    tail->next = new;
}

t_stack *stack_get_last(t_stack *stack)
{
    while (stack && stack->next != NULL)
        stack = stack->next;
    return (stack);
}

t_stack *stack_get_before_last(t_stack *stack)
{
    while (stack && stack->next && stack->next->next != NULL)
        stack = stack->next;
    return (stack);
}

int stack_size(t_stack *stack)
{
    int size;

    size = 0;
    if (!stack)
        return (0);
    while (stack)
    {
        stack = stack->next;
        size++;
    }
    return (size);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

void    free_stack(t_stack **stack)
{
    t_stack *tmp;

    if (!stack || !(*stack))
        return ;
    while (*stack)
    {
        tmp = (*stack)->next;
        free(*stack);
        *stack = tmp;
    }
    *stack = NULL;
}

void    error_exit(t_stack **stack_a, t_stack **stack_b)
{
    if (stack_a == NULL || *stack_a != NULL)
        free_stack(stack_a);
    if (stack_b == NULL || *stack_b != NULL)
        free_stack(stack_b);
    ft_putstr("Error\n");
    exit(1);
}

long int    ft_atoi(const char *str)
{
    long int    nb;
    int         sign;
    int         i;

    nb = 0;
    sign = 1;
    i = 0;
    while (str[i] == ' ' || str[i] == '\t' || str[i] == '\n' ||
           str[i] == '\v' || str[i] == '\f' || str[i] == '\r')
        i++;
    if (str[i] == '-' || str[i] == '+')
    {
        if (str[i] == '-')
            sign = -1;
        i++;
    }
    while (str[i] >= '0' && str[i] <= '9')
    {
        nb = nb * 10 + (str[i] - '0');
        if (nb > INT_MAX)
            return (nb * sign);
        i++;
    }
    return (nb * sign);
}

void    ft_putstr(char *str)
{
    while (*str)
        write(1, str++, 1);
}

int abs_value(int n)
{
    if (n < 0)
        return (n * -1);
    return (n);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   input_check.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

int is_number(char *str)
{
    int i;

    i = 0;
    if (str[0] == '-' || str[0] == '+')
        i++;
    if (!str[i])
        return (0);
    while (str[i])
    {
        if (str[i] < '0' || str[i] > '9')
            return (0);
        i++;
    }
    return (1);
}

int has_duplicates(t_stack *stack)
{
    t_stack *tmp;
    t_stack *tmp2;

    tmp = stack;
    while (tmp)
    {
        tmp2 = tmp->next;
        while (tmp2)
        {
            if (tmp->value == tmp2->value)
                return (1);
            tmp2 = tmp2->next;
        }
        tmp = tmp->next;
    }
    return (0);
}

void    check_input(char **av)
{
    int i;

    i = 1;
    while (av[i])
    {
        if (!is_number(av[i]))
        {
            ft_putstr("Error\n");
            exit(1);
        }
        i++;
    }
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   indexing.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

void    assign_index(t_stack *stack_a, int stack_size)
{
    t_stack *ptr;
    t_stack *highest;
    int     value;

    while (--stack_size > 0)
    {
        ptr = stack_a;
        value = INT_MIN;
        highest = NULL;
        while (ptr)
        {
            if (ptr->value == INT_MIN && ptr->index == 0)
                ptr->index = 1;
            if (ptr->value > value && ptr->index == 0)
            {
                value = ptr->value;
                highest = ptr;
            }
            ptr = ptr->next;
        }
        if (highest != NULL)
            highest->index = stack_size;
    }
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   is_sorted.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

int is_sorted(t_stack *stack)
{
    while (stack && stack->next)
    {
        if (stack->value > stack->next->value)
            return (0);
        stack = stack->next;
    }
    return (1);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   shift_stack.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

static int get_lowest_index_position(t_stack **stack)
{
    t_stack *tmp;
    int     lowest_index;
    int     lowest_pos;
    int     current_pos;

    tmp = *stack;
    lowest_index = INT_MAX;
    lowest_pos = 0;
    current_pos = 0;
    while (tmp)
    {
        if (tmp->index < lowest_index)
        {
            lowest_index = tmp->index;
            lowest_pos = current_pos;
        }
        current_pos++;
        tmp = tmp->next;
    }
    return (lowest_pos);
}

void    shift_stack(t_stack **stack_a)
{
    int lowest_pos;
    int size;

    size = stack_size(*stack_a);
    lowest_pos = get_lowest_index_position(stack_a);
    if (lowest_pos > size / 2)
    {
        while (lowest_pos < size)
        {
            rra(stack_a);
            lowest_pos++;
        }
    }
    else
    {
        while (lowest_pos > 0)
        {
            ra(stack_a);
            lowest_pos--;
        }
    }
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Makefile                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: push_swap                                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/01/01 00:00:00 by push_swap         #+#    #+#             */
/*   Updated: 2024/01/01 00:00:00 by push_swap        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

NAME = push_swap

CC = gcc
CFLAGS = -Wall -Wextra -Werror

SRCS = main.c \
       sort.c \
       sort_three.c \
       push_all_save_three.c \
       position.c \
       cost.c \
       do_move.c \
       operations_push.c \
       operations_swap.c \
       operations_rotate.c \
       operations_reverse_rotate.c \
       stack_utils.c \
       utils.c \
       input_check.c \
       indexing.c \
       is_sorted.c \
       shift_stack.c

OBJS = $(SRCS:.c=.o)

all: $(NAME)

$(NAME): $(OBJS)
	$(CC) $(CFLAGS) -o $(NAME) $(OBJS)

%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

clean:
	rm -f $(OBJS)

fclean: clean
	rm -f $(NAME)

re: fclean all

.PHONY: all clean fclean re